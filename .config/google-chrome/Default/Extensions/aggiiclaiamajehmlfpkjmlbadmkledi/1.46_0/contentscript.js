!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([,function(e,t,n){"use strict";t.a={af:{label:"Afrikaans",direction:"ltr"},sq:{label:"Albanian",direction:"ltr"},ar:{label:"Arabic",direction:"rtl"},hy:{label:"Armenian",direction:"ltr"},az:{label:"Azerbaijani",direction:"ltr"},eu:{label:"Basque",direction:"ltr"},be:{label:"Belarusian",direction:"ltr"},bn:{label:"Bengali",direction:"ltr"},bg:{label:"Bulgarian",direction:"ltr"},ca:{label:"Catalan",direction:"ltr"},"zh-CN":{label:"Chinese (Simplified)",direction:"ltr"},"zh-TW":{label:"Chinese (Traditional)",direction:"ltr"},hr:{label:"Croatian",direction:"ltr"},cs:{label:"Czech",direction:"ltr"},da:{label:"Danish",direction:"ltr"},nl:{label:"Dutch",direction:"ltr"},en:{label:"English",direction:"ltr"},eo:{label:"Esperanto",direction:"ltr"},et:{label:"Estonian",direction:"ltr"},tl:{label:"Filipino",direction:"ltr"},fi:{label:"Finnish",direction:"ltr"},fr:{label:"French",direction:"ltr"},gl:{label:"Galician",direction:"ltr"},ka:{label:"Georgian",direction:"ltr"},de:{label:"German",direction:"ltr"},el:{label:"Greek",direction:"ltr"},gu:{label:"Gujarati",direction:"ltr"},ht:{label:"Haitian (Creole)",direction:"ltr"},iw:{label:"Hebrew",direction:"rtl"},hi:{label:"Hindi",direction:"ltr"},hu:{label:"Hungarian",direction:"ltr"},is:{label:"Icelandic",direction:"ltr"},id:{label:"Indonesian",direction:"ltr"},ga:{label:"Irish",direction:"ltr"},it:{label:"Italian",direction:"ltr"},ja:{label:"Japanese",direction:"ltr"},kn:{label:"Kannada",direction:"ltr"},ko:{label:"Korean",direction:"ltr"},la:{label:"Latin",direction:"ltr"},lv:{label:"Latvian",direction:"ltr"},lt:{label:"Lithuanian",direction:"ltr"},mk:{label:"Macedonian",direction:"ltr"},ms:{label:"Malay",direction:"ltr"},mt:{label:"Maltese",direction:"ltr"},no:{label:"Norwegian",direction:"ltr"},fa:{label:"Persian",direction:"rtl"},pl:{label:"Polish",direction:"ltr"},pt:{label:"Portuguese",direction:"ltr"},ro:{label:"Romanian",direction:"ltr"},ru:{label:"Russian",direction:"ltr"},sr:{label:"Serbian",direction:"ltr"},sk:{label:"Slovak",direction:"ltr"},sl:{label:"Slovenian",direction:"ltr"},es:{label:"Spanish",direction:"ltr"},sw:{label:"Swahili",direction:"ltr"},sv:{label:"Swedish",direction:"ltr"},ta:{label:"Tamil",direction:"ltr"},te:{label:"Telugu",direction:"ltr"},th:{label:"Thai",direction:"ltr"},tr:{label:"Turkish",direction:"ltr"},uk:{label:"Ukrainian",direction:"ltr"},ur:{label:"Urdu",direction:"rtl"},vi:{label:"Vietnamese",direction:"ltr"},cy:{label:"Welsh",direction:"ltr"},yi:{label:"Yiddish",direction:"rtl"}}},function(e,t,n){"use strict";var r=n(1);const o={modifierKeys:{16:"shift",17:"ctrl",18:"alt",224:"meta",91:"command",93:"command",13:"Return"},deserialize:function(e){let t;try{t=JSON.parse(e)}catch(n){if(!n.toString().match(/SyntaxError/))throw n;t=e}return t},formatTranslation:function(e,t,n,i){let a="",s="";"rtl"==t&&(s=" rtl"),e instanceof Array?e.forEach(function(e){const t=e.pos?"<strong>"+e.pos+"</strong>: ":"",n=e.meanings.slice(0,5).join(", ")+(e.meanings.length>5?"...":"");a=a+'<div class="pos_translation '+s+'">'+t+n+"</div>"}):a='<div class="pos_translation '+s+'">'+o.escape_html(e)+"</div>";const l=r.a[n];return l&&i.show_from_lang&&(a+=`\n      <div class="from_lang ${s}">\n        <strong>translated from:</strong>\n        <span> ${l.label}</span>\n      </div>\n    `),a},escape_html:function(e){return e.replace(XRegExp("(<|>|&)","g"),function(e,t){switch(t){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;"}})},regexp_escape:function(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}};t.a=o},,function(e,t,n){"use strict";n.r(t);var r=n(2),o=n(1);const i=n(5)("transover");let a,s;function l(e){const t=$.grep(e.except_urls,function(e){return RegExp(e).test(window.location.href)}).length>0,n=$.grep(e.only_urls,function(e){return RegExp(e).test(window.location.href)}).length>0||0===e.only_urls.length;return t||!n}function c(e){return document.documentElement.appendChild(d[f[e]]),$("<"+e+">")}function u(e){$(e).each(function(){const e=this;$(this.shadowRoot.querySelector("main")).fadeOut("fast",function(){e.remove()})}),$("#"+f[e]).remove()}const d={},f={"transover-popup":"transover-popup-template","transover-type-and-translate-popup":"transover-tat-popup-template"};function p(e){const t=e+".html",n=e+".js",r=new XMLHttpRequest;r.open("GET",chrome.extension.getURL(t),!0),r.responseType="document",r.onload=function(e){const t=e.target.response.querySelector("template");d[t.id]=t},r.send();const o=document.createElement("script");o.type="text/javascript",o.src=chrome.extension.getURL(n),o.async=!0,document.head.appendChild(o)}let h;function m(e,t){u("transover-type-and-translate-popup");const n=c("transover-popup");$("body").append(n),n.on("transover-popup_content_updated",function(){const t=function(e,t,n){const r={},o=Number(n.attr("outer-width")),i=Number(n.attr("outer-height"));if(e+10+o+5<$(window).width())r.x=e+10;else if(e-10-o-5>0)r.x=e-10-o;else if(o+10<$(window).width())r.x=5;else{const e=o-Number(n.attr("content-width"));n.attr("content-width",$(window).width()-10-e),n.attr("content-height",Number(n.attr("content-height"))+4),r.x=5}t-10-i-5>0?r.y=t-10-i:t+10+i+5<$(window).height()?r.y=t+10:r.y=5;return r}(e.clientX,e.clientY,n);n.each(function(){$(this.shadowRoot.querySelector("main")).hide()}).attr({top:t.y,left:t.x}).each(function(){$(this.shadowRoot.querySelector("main")).fadeIn("fast")})}),n.attr("content",t)}function g(e){function t(e){const t=$(document.elementFromPoint(e.clientX,e.clientY)),n="\\p{L}+(?:['’]\\p{L}+)*",o={"line-height":t.css("line-height"),"font-size":"1em","font-family":t.css("font-family")},a=t.contents().filter(function(){return this.nodeType==Node.TEXT_NODE&&XRegExp(n).test(this.nodeValue)});if(0==a.length)return i("no text"),"";const s=function(e,t){$(a).wrap("<transblock />");let n=document.elementFromPoint(t.clientX,t.clientY);return"TRANSBLOCK"!=n.nodeName?($(a).unwrap(),null):(n=n.childNodes[0],$(a).unwrap(),n)}(0,e);return s?function(e,t){$(e).wrap("<transwrapper />");const n=t(e);return $("transwrapper").replaceWith(r.a.escape_html($("transwrapper").text())),n}(s,function(){let t="";const a=function t(o,a){if(i("getHitText: '"+o.textContent+"'"),XRegExp(n).test(o.textContent)){$(o).replaceWith(function(){return this.textContent.replace(XRegExp("^(.{"+Math.round(o.textContent.length/2)+"}(?:\\p{L}|['’](?=\\p{L}))*)(.*)","s"),function(e,t,n){return"<transblock>"+r.a.escape_html(t)+"</transblock><transblock>"+r.a.escape_html(n)+"</transblock>"})}),$("transblock").css(a);const n=document.elementFromPoint(e.clientX,e.clientY).childNodes[0];return n.textContent==o.textContent?n:t(n,a)}return null}(s,o);if(a){$(a).replaceWith(function(){return this.textContent.replace(XRegExp("(<|>|&|"+n+")","gs"),function(e,t){switch(t){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";default:return"<transover>"+t+"</transover>"}})}),$("transover").css(o);const r=document.elementFromPoint(e.clientX,e.clientY);"TRANSOVER"!=r.nodeName?i("missed!"):(t=$(r).text(),i("got it: '"+t+"'"))}return t}):(i("hit between lines"),"")}const n=window.getSelection(),s=document.elementFromPoint(e.clientX,e.clientY);if(!s)return;if(/INPUT|TEXTAREA/.test(s.nodeName)||s.isContentEditable||$(s).parents().filter(function(){return this.isContentEditable}).length>0)return;let l="";if(n.toString()){if(a.selection_key_only)return void i('Skip because "selection_key_only"');i("Got selection: "+n.toString());let r=n.getRangeAt(0).commonAncestorContainer;for(;r.nodeType!=Node.ELEMENT_NODE;)r=r.parentNode;($(s).is(r)||$.contains(r,s))&&n.containsNode(s,!0)?l=n.toString():"point"==a.translate_by&&(l=t(e))}else l=t(e);""!=l&&chrome.extension.sendRequest({handler:"translate",word:l},function(t){i("response: ",t);const n=r.a.deserialize(t.translation);n?(h=n,m(e,r.a.formatTranslation(n,o.a[t.tl].direction,t.sl,a))):i("skipping empty translation")})}function y(e,t){if(a.target_lang){if(a.word_key_only&&!b)return;if(s)return;t()}}chrome.extension.sendRequest({handler:"get_options"},function(e){a=JSON.parse(e.options),s=l(a),chrome.extension.sendRequest({handler:"setIcon",disabled:s})}),document.addEventListener("visibilitychange",function(){document.hidden||chrome.extension.sendRequest({handler:"get_options"},function(e){a=JSON.parse(e.options),s=l(a),chrome.extension.sendRequest({handler:"setIcon",disabled:s})})},!1),$(document).on("mousestop",function(e){y(0,function(){window.getSelection().toString()?a.selection_key_only||g(e):"point"==a.translate_by&&g(e)})}),$(document).click(function(e){return y(0,function(){"click"==a.translate_by&&($(e.target).closest("a").length>0||g(e))}),!0});let C,b=!1;$(document).keydown(function(e){if(r.a.modifierKeys[e.keyCode]==a.popup_show_trigger){b=!0;const e=window.getSelection().toString();a.selection_key_only&&e&&(i("Got selection_key_only"),chrome.extension.sendRequest({handler:"translate",word:e},function(e){i("response: ",e);const t=r.a.deserialize(e.translation);if(!t)return void i("skipping empty translation");const n={clientX:w.x,clientY:w.y};h=t,m(n,r.a.formatTranslation(t,o.a[e.tl].direction,e.sl,a))}))}!e.originalEvent.repeat&&r.a.modifierKeys[e.keyCode]==a.tts_key&&a.tts&&$("transover-popup").length>0&&(i("tts"),chrome.extension.sendRequest({handler:"tts"})),27==e.keyCode&&u("transover-type-and-translate-popup")}).keyup(function(e){r.a.modifierKeys[e.keyCode]==a.popup_show_trigger&&(b=!1)}),$(document).mousemove(function(e){if(function(e){const t=parseInt(w.x)-5,n=parseInt(w.x)+5,r=parseInt(w.y)-5,o=parseInt(w.y)+5;return e.clientX>n||e.clientX<t||e.clientY>o||e.clientY<r}(e)){const t=new $.Event("mousemove_without_noise");t.clientX=e.clientX,t.clientY=e.clientY,$(document).trigger(t)}});const w={x:0,y:0};$(document).scroll(function(){u("transover-popup")}),$(document).on("mousemove_without_noise",function(e){if(u("transover-popup"),clearTimeout(C),a){let t=a.delay;window.getSelection().toString()?a.selection_key_only&&(t=200):a.word_key_only&&(t=200),C=setTimeout(function(){const t=new $.Event("mousestop");w.x=t.clientX=e.clientX,w.y=t.clientY=e.clientY,$(document).trigger(t)},t)}}),chrome.runtime.onMessage.addListener(function(e){if(window==window.top)if("open_type_and_translate"==e)0==$("transover-type-and-translate-popup").length?chrome.extension.sendRequest({handler:"get_last_tat_sl_tl"},function(e){const t=c("transover-type-and-translate-popup"),n=$.extend({},o.a);e.sl&&(n[e.sl].selected_sl=!0),n[e.tast_tl||a.target_lang].selected_tl=!0,t.attr("data-languages",JSON.stringify(n)),t.attr("data-disable_on_this_page",s),$("body").append(t),t.each(function(){$(this.shadowRoot.querySelector("main")).hide().fadeIn("fast")})}):u("transover-type-and-translate-popup");else if("copy-translation-to-clipboard"==e&&(i("received copy-translation-to-clipboard"),$("transover-popup").length>0)){let e;(function(e){const t=document.createElement("input");t.style.position="fixed",t.style.opacity=0,t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)})(e=Array.isArray(h)?h.map(e=>{let t="";return e.pos&&(t=e.pos+": "),t+=e.meanings.slice(0,5).join(", ")}).join("; "):h)}}),$(function(){p("popup"),p("tat_popup")}),window.addEventListener("message",function(e){e.source==window&&("transoverTranslate"==e.data.type?chrome.extension.sendRequest({handler:"translate",word:e.data.text,sl:e.data.sl,tl:e.data.tl},function(e){i("tat response: ",e);const t=r.a.deserialize(e.translation);if(!t)return void i("tat skipping empty translation");const n={clientX:$(window).width(),clientY:0};h=t,m(n,r.a.formatTranslation(t,o.a[e.tl].direction,e.sl,a))}):"toggle_disable_on_this_page"===e.data.type?(s=e.data.disable_on_this_page,chrome.extension.sendRequest({handler:"toggle_disable_on_this_page",disable_on_this_page:s,current_url:window.location.origin}),chrome.extension.sendRequest({handler:"setIcon",disabled:s}),u("transover-type-and-translate-popup")):"tat_close"===e.data.type&&u("transover-type-and-translate-popup"))})},function(e,t,n){(function(r){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(7)(t);const{formatters:o}=e.exports;o.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(6))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],u=!1,d=-1;function f(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&p())}function p(){if(!u){var e=s(f);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function a(...e){if(!a.enabled)return;const t=a,o=Number(new Date),i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;s++;const i=r.formatters[o];if("function"==typeof i){const r=e[s];n=i.call(t,r),e.splice(s,1),s--}return n}),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return a.namespace=e,a.enabled=r.enabled(e),a.useColors=r.useColors(),a.color=t(e),a.destroy=o,a.extend=i,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function o(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function a(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(a),...r.skips.map(a).map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(8),Object.keys(e).forEach(t=>{r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=7*i,s=365.25*i;function l(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var l=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return l*s;case"weeks":case"week":case"w":return l*a;case"days":case"day":case"d":return l*i;case"hours":case"hour":case"hrs":case"hr":case"h":return l*o;case"minutes":case"minute":case"mins":case"min":case"m":return l*r;case"seconds":case"second":case"secs":case"sec":case"s":return l*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return l;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=i)return l(e,t,i,"day");if(t>=o)return l(e,t,o,"hour");if(t>=r)return l(e,t,r,"minute");if(t>=n)return l(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=i)return Math.round(e/i)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,